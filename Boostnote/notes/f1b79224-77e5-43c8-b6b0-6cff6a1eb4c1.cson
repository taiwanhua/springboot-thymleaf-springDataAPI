createdAt: "2019-05-19T13:56:27.953Z"
updatedAt: "2019-05-30T07:13:15.633Z"
type: "SNIPPET_NOTE"
folder: "888163b6bb8ae21eaf80"
title: "5.2.3 code"
tags: []
description: "5.2.3 code"
snippets: [
  {
    linesHighlighted: []
    name: "Reg.java"
    mode: "Java"
    content: '''
      package com.example.fom.web;
      
      import com.example.fom.domain.Twopass;
      import com.example.fom.domain.UseinterST;
      import com.example.fom.domain.User;
      import com.example.fom.domain.UserRepos;
      import com.example.fom.error.Httpstatus;
      import org.slf4j.Logger;
      import org.slf4j.LoggerFactory;
      import org.springframework.beans.BeanUtils;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.core.annotation.AnnotationUtils;
      import org.springframework.stereotype.Controller;
      import org.springframework.ui.Model;
      import org.springframework.validation.BindingResult;
      import org.springframework.validation.FieldError;
      import org.springframework.web.bind.annotation.*;
      import org.springframework.web.servlet.ModelAndView;
      
      import javax.servlet.http.HttpServletRequest;
      import javax.validation.Valid;
      import java.lang.annotation.Annotation;
      import java.net.http.HttpRequest;
      import java.util.List;
      
      @Controller
      public class Reg {
        @Autowired private UserRepos userRepos;
      
        @GetMapping("/find/{id}")
        public String findoneu(@PathVariable Long id, Model model) {    
          User ui = userRepos.findById(id).orElse(null);
          if (ui == null) {
            throw new Httpstatus(
                "沒找到錯了錯了"); // 會在Log裡拋出異常，但是若沒有在繼承RuntimeException的類裡面重新導向Httpstatus的話，就不會導向重新
          }
          model.addAttribute("ui", ui);
          return "find";
        }
      
        private final Logger logger = LoggerFactory.getLogger(Reg.class);//打印Log到控制台
      
        @ExceptionHandler({Exception.class})
        public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {
          logger.error("Reques1t URL : {} , Exception e : {}", request.getRequestURI(), e.getMessage());//輸出Log格式
      //透過下面這三行，可以提早拋出 Exception就不會走入下面跳到error頁面，而是上面由httpstatus指定的自定義錯誤頁面
      //    if (AnnotationUtils.findAnnotation(e.getClass(),ResponseStatus.class)!=null){
      //      throw e;
      //    }
          ModelAndView mav = new ModelAndView();//加載視圖
          mav.addObject("request", request.getRequestURI());
          mav.addObject("Message", e.getMessage());
          mav.setViewName("error/error"); //指定跳轉的頁面templates/error/error
          return mav;
        }
      }
      
    '''
  }
  {
    linesHighlighted: []
    name: "error.html"
    mode: "HTML"
    content: '''
      <!DOCTYPE html>
      <html lang="en"
            xmlns:th="http://www.w3.org/1999/xhtml">
      <head>
          <meta charset="UTF-8"/>
          <meta http-equiv="X-UA-Compatible"
                content="IE=edge">
          <meta name="viewport"
                content="width=device-width, initial-scale=1">
          <title>book</title>
          <link th:href="@{/css/bootstrap.min.css}"
                href="../../static/css/bootstrap.min.css"
                rel="stylesheet"/>
      </head>
      <body>
      <div class="container">
          <h1 th:text="${request}"></h1>
      
          <h1 th:text="${Message}"></h1>
      </div>
      <script src="https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js"></script>
      <script th:src="@{/js/bootstrap.min.js}"></script>
      </body>
      </html>
      
    '''
  }
  {
    linesHighlighted: []
    name: "Httpstatus.java"
    mode: "Java"
    content: '''
      package com.example.fom.error;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(HttpStatus.NOT_FOUND)//不管何種錯誤，獎導向404 not found頁面
      public class Httpstatus extends RuntimeException {
          public Httpstatus() {
          }
      
          public Httpstatus(String message) {
              super(message);
          }
      
          public Httpstatus(String message, Throwable cause) {
              super(message, cause);
          }
      }
      
    '''
  }
]
isStarred: false
isTrashed: false
